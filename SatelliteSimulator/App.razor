<header>
    Satellites:
    <input type="number" value="@satellites.Length" @oninput="@(evt => SpawnSatellites(int.Parse((string)evt.Value)))" />
    <button @onclick="OnInitialized">Restart</button>
</header>
<article>
    <SimulationWebGLRenderer Suns="suns" Satellites="satellites" OnRenderFrame="OnRenderFrame" />
</article>

@code {
    public struct Body
    {
        public Point Pos, Vel;
        public float Mass;
        public Color Color;

        public Body Respawn()
        {
            // Random position/velocity/color
            Pos = new Point(Random.Shared.Next(10000), Random.Shared.Next(10000));
            Vel = new Point((float)(Random.Shared.NextDouble() * 2 - 1), ((float)Random.Shared.NextDouble() * 2 - 1)) * 25f;
            Color = Color.Presets[Random.Shared.Next(Color.Presets.Length)];
            return this;
        }
    }

    Body[] satellites = new Body[100];
    Body[] suns = new Body[2];

    protected override void OnInitialized()
    {
        //TODO: Initialize the suns
        SpawnSatellites(satellites.Length);
    }

    void SpawnSatellites(int count) {
        //TODO: Initialize the satellites
        return;
    }

    void OnRenderFrame()
    {
        // Do physics for each body (both suns and satellites)

        //Run physics for each sun

        //Run physics for each satellite
    }

    void RunPhysicsForBody(ref Body body)
    {
        // For each sun...
        for (var sunIndex = 0; sunIndex < suns.Length; sunIndex++)
        {
            ref var sun = ref suns[sunIndex];
            if (body.Pos != sun.Pos)
            {
                // ... apply sun's gravitational force to the body
                const float G = 1f;
                //Apply the formular velocity = G * mass / ((a.Pos - b.Pos) ** 2)
            }
        }

        // Move it

        // If it's lost in space, respawn it

    }
}
